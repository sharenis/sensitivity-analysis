# -*- coding: utf-8 -*-
"""Code Model_domain 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ghcM3LJYrqZM6zL1od0uUG9uV4VBPmu3
"""

#library
import numpy as np
import pandas as pd
import random
import matplotlib.pyplot as plt

from sympy import symbols, Eq
import streamlit as st
import warnings
warnings.filterwarnings("ignore")

"""Function Piecewise by Sharen Ivana"""

#nilai piecewise function jacobian
def J44(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        domain_1 = u2min
        return (-Bv * Ih) - (domain_1 + Mv)

    elif Ohm21 <= Ohm2 <= Ohm22:
        domain_2 = u2min + ((Ohm2 - Ohm21) / (Ohm22 - Ohm21) * II * Bv * (1 - Mv))
        return (-Bv * Ih) - (domain_2 + Mv)

    elif Ohm22 < Ohm2 <= Ohm23:
        domain_3 = II * Bv * (1 - Mv) + u2min
        return (-Bv * Ih) - (domain_3 + Mv)

    elif Ohm23 < Ohm2 <= Ohm24:
        domain_4 = II * Bv * (1 - Mv) + u2min + ((Ohm2 - Ohm23) / (Ohm23 - Ohm24) * II * Bv * (1 - Mv))
        return (-Bv * Ih) - (domain_4 + Mv)

def J55(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        domain_1 = u2min
        return -(domain_1 + Mv)

    elif Ohm21 <= Ohm2 <= Ohm22:
        domain_2 = u2min + ((Ohm2 - Ohm21) / (Ohm22 - Ohm21) * II * Bv * (1 - Mv))
        return -(domain_2 + Mv)

    elif Ohm22 < Ohm2 <= Ohm23:
        domain_3 = II * Bv * (1 - Mv) + u2min
        return -(domain_3 + Mv)


    elif Ohm23 < Ohm2 <= Ohm24:
        domain_4 = II * Bv * (1 - Mv) + u2min + ((Ohm2 - Ohm23) / (Ohm23 - Ohm24) * II * Bv * (1 - Mv))
        return -(domain_4 + Mv)


#nilai piecewise function ∂F/∂P
def F46(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return 1

    elif Ohm21 <= Ohm2 <= Ohm22:
        return 1 - Sv * (Ohm2 - Ohm21)/(Ohm22 - Ohm21) * Bv * (1 - Mv)

    elif Ohm22 < Ohm2 <= Ohm23:
        return 1 - Sv * Bv * (1 - Mv)

    elif Ohm23 < Ohm2 <= Ohm24:
        return 1 - Sv * Bv * (1 - Mv) - Sv * (Ohm2 - Ohm23)/(Ohm23 - Ohm24) * Bv * (1 - Mv)

def F47(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return -Sv * Ih

    elif Ohm21 <= Ohm2 <= Ohm22:
        return (-Sv * Ih) - Sv * (Ohm2 - Ohm21)/(Ohm22 - Ohm21) * II * (1 - Mv)

    elif Ohm22 < Ohm2 <= Ohm23:
        return (-Sv * Ih) - Sv * II * (1 - Mv)

    elif Ohm23 < Ohm2 <= Ohm24:
        return (-Sv * Ih) - Sv * II * (1 - Mv) - Sv * (Ohm2 - Ohm23)/(Ohm23 - Ohm24) * II * (1 - Mv)

def F48(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return -Sv

    elif Ohm21 <= Ohm2 <= Ohm22:
        return -Sv

    elif Ohm22 < Ohm2 <= Ohm23:
        return -Sv

    elif Ohm23 < Ohm2 <= Ohm24:
        return -Sv

def F49(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return 0

    elif Ohm21 <= Ohm2 <= Ohm22:
        return -Sv * II * Bv * (1 - Mv) / (Ohm22 - Ohm21)

    elif Ohm22 < Ohm2 <= Ohm23:
        return 0

    elif Ohm23 < Ohm2 <= Ohm24:
        return -Sv * II * Bv * (1 - Mv) / (Ohm23 - Ohm24)

def F410(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return 0

    elif Ohm21 <= Ohm2 <= Ohm22:
        return -Sv * ((Ohm2 - Ohm22)/(Ohm22 - Ohm21)*(Ohm22 - Ohm21)) * II * Bv * (1 - Mv)

    elif Ohm22 < Ohm2 <= Ohm23:
        return 0

    elif Ohm23 < Ohm2 <= Ohm24:
        return 0

def F411(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return 0

    elif Ohm21 <= Ohm2 <= Ohm22:
        return -Sv * ((Ohm21 - Ohm2)/(Ohm22 - Ohm21)*(Ohm22 - Ohm21)) * II * Bv * (1 - Mv)

    elif Ohm22 < Ohm2 <= Ohm23:
        return 0

    elif Ohm23 < Ohm2 <= Ohm24:
        return 0

def F412(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return 0

    elif Ohm21 <= Ohm2 <= Ohm22:
        return 0

    elif Ohm22 < Ohm2 <= Ohm23:
        return 0

    elif Ohm23 < Ohm2 <= Ohm24:
        return -Sv * ((Ohm24 - Ohm2)/(Ohm23 - Ohm24)*(Ohm23 - Ohm24)) * II * Bv * (1 - Mv)

def F413(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return 0

    elif Ohm21 <= Ohm2 <= Ohm22:
        return 0

    elif Ohm22 < Ohm2 <= Ohm23:
        return 0

    elif Ohm23 < Ohm2 <= Ohm24:
        return -Sv * ((Ohm2 - Ohm24)/(Ohm23 - Ohm24)*(Ohm23 - Ohm24)) * II * Bv * (1 - Mv)

def F414(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return -Sv

    elif Ohm21 <= Ohm2 <= Ohm22:
        return Sv * (Ohm2 - Ohm21)/(Ohm22 - Ohm21) * II * Bv - Sv

    elif Ohm22 < Ohm2 <= Ohm23:
        return (Sv * II * Bv) - Sv

    elif Ohm23 < Ohm2 <= Ohm24:
        return (Sv * II * Bv) + Sv * (Ohm2 - Ohm23)/(Ohm23 - Ohm24) * II * Bv - Sv


def F56(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return 0

    elif Ohm21 <= Ohm2 <= Ohm22:
        return -Iv * (Ohm2 - Ohm21)/(Ohm22 - Ohm21) * Bv * (1 - Mv)

    elif Ohm22 < Ohm2 <= Ohm23:
        return -Iv * Bv * (1 - Mv)

    elif Ohm23 < Ohm2 <= Ohm24:
        return (-Iv * Bv * (1 - Mv)) - Iv * (Ohm2 - Ohm23)/(Ohm23 - Ohm24) * Bv * (1 - Mv)

def F57(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return Sv * Ih

    elif Ohm21 <= Ohm2 <= Ohm22:
        return (Sv * Ih) - Iv * (Ohm2 - Ohm21)/(Ohm22 - Ohm21) * II * (1 - Mv)

    elif Ohm22 < Ohm2 <= Ohm23:
        return (Sv * Ih) - Iv * II * (1 - Mv)

    elif Ohm23 < Ohm2 <= Ohm24:
        return (Sv * Ih) - Iv * II * (1 - Mv) - Iv * (Ohm2 - Ohm23)/(Ohm23 - Ohm24) * II * (1 - Mv)

def F58(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return -Iv

    elif Ohm21 <= Ohm2 <= Ohm22:
        return -Iv

    elif Ohm22 < Ohm2 <= Ohm23:
        return -Iv

    elif Ohm23 < Ohm2 <= Ohm24:
        return -Iv

def F59(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return 0

    elif Ohm21 <= Ohm2 <= Ohm22:
        return -Iv * II * Bv * (1 - Mv) / (Ohm22 - Ohm21)

    elif Ohm22 < Ohm2 <= Ohm23:
        return 0

    elif Ohm23 < Ohm2 <= Ohm24:
        return -Iv * II * Bv * (1 - Mv) / (Ohm23 - Ohm24)

def F510(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return 0

    elif Ohm21 <= Ohm2 <= Ohm22:
        return -Iv * ((Ohm2 - Ohm22)/(Ohm22 - Ohm21)*(Ohm22 - Ohm21)) * II * Bv * (1 - Mv)

    elif Ohm22 < Ohm2 <= Ohm23:
        return 0

    elif Ohm23 < Ohm2 <= Ohm24:
        return 0

def F511(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return 0

    elif Ohm21 <= Ohm2 <= Ohm22:
        return -Iv * ((Ohm21 - Ohm2)/(Ohm22 - Ohm21)*(Ohm22 - Ohm21)) * II * Bv * (1 - Mv)

    elif Ohm22 < Ohm2 <= Ohm23:
        return 0

    elif Ohm23 < Ohm2 <= Ohm24:
        return 0

def F512(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return 0

    elif Ohm21 <= Ohm2 <= Ohm22:
        return 0

    elif Ohm22 < Ohm2 <= Ohm23:
        return 0

    elif Ohm23 < Ohm2 <= Ohm24:
        return -Iv * ((Ohm24 - Ohm2)/(Ohm23 - Ohm24)*(Ohm23 - Ohm24)) * II * Bv * (1 - Mv)

def F513(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return 0

    elif Ohm21 <= Ohm2 <= Ohm22:
        return 0

    elif Ohm22 < Ohm2 <= Ohm23:
        return 0

    elif Ohm23 < Ohm2 <= Ohm24:
        return -Iv * ((Ohm2 - Ohm23)/(Ohm23 - Ohm24)*(Ohm23 - Ohm24)) * II * Bv * (1 - Mv)

def F514(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return -Iv

    elif Ohm21 <= Ohm2 <= Ohm22:
        return Iv * (Ohm2 - Ohm21)/(Ohm22 - Ohm21) * II * Bv * - Iv

    elif Ohm22 < Ohm2 <= Ohm23:
        return Iv * II * Bv - Iv

    elif Ohm23 < Ohm2 <= Ohm24:
        return Iv * II * Bv + Iv * (Ohm2 - Ohm23)/(Ohm23 - Ohm24) * II * Bv * - Iv

#nilai u2(ohm2)
def nilai_u2(Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, II, Bv, u2min, Mv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return u2min

    elif Ohm21 <= Ohm2 <= Ohm22:
        return u2min + (Ohm2 - Ohm21) / (Ohm22 - Ohm21) * II * Bv * (1 - Mv)

    elif Ohm22 < Ohm2 <= Ohm23:
        return II * Bv * (1 - Mv) #u2max

    elif Ohm23 < Ohm2 <= Ohm24:
        return II * Bv * (1 - Mv) + (Ohm2 - Ohm23) / (Ohm24 - Ohm23) * (u2min - II * Bv * (1 - Mv))

def model_define(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    model = np.array([
        [A - (Bh * Sh * Iv) - (Mh * Sh)],  # model1 (dSh/dt)
        [(Bh * Sh * Iv) - (u1 + a + Mh) * Ih],  # model2 (dIh/dt)
        [(a * Ih) - (Mh * Rh)],  # model3 (dRh/dt)
        [II - (Bv * Sv * Ih) - (nilai_u2(Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, II, Bv, u2min, Mv) + Mv) * Sv],  # model4 (dSv/dt)
        [(Bv * Sv * Ih) - (nilai_u2(Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, II, Bv, u2min, Mv) + Mv) * Iv]   # model5 (dIv/dt)
    ])
    return model

def matrix_define(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv): #14 param dan 5 fungsi
    # Matriks jacobian
    J = np.array([
        [(-Bh * Iv - Mh), 0, 0, 0, (-Bh * Sh)],
        [(-Bh * Iv), (-(u1 + a + Mh)), 0, 0, (Bh * Sh)],
        [0, a, -Mh, 0, 0],
        [0, -Bv * Sv, 0, J44(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv), 0],
        [0, Bv * Sv, 0, Bv * Ih, J55(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv)]
    ])

    # Matriks ∂F/∂P
    F = np.array([
        [1, -Sh * Iv, -Sh, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, Sh * Iv, -Ih, -Ih, -Ih, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, -Rh, 0, Ih, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0,
         F46(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv),
         F47(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv),
         F48(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv),
         F49(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv),
         F410(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv),
         F411(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv),
         F412(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv),
         F413(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv),
         F414(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv)],
        [0, 0, 0, 0, 0,
         F56(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv),
         F57(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv),
         F58(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv),
         F59(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv),
         F510(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv),
         F511(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv),
         F512(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv),
         F513(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv),
         F514(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv)]
    ])

    return J, F

def dS_dt(J, S, F):
    return np.dot(J, S) + F

def runge_kutta_4(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv, h, S):
    # Runge-Kutta untuk model
    k1 = model_define(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv)
    k2 = model_define(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh + 0.5 * h * k1[0, 0], Ih + 0.5 * h * k1[1, 0], Rh + 0.5 * h * k1[2, 0], Sv + 0.5 * h * k1[3, 0], Iv + 0.5 * h * k1[4, 0])
    k3 = model_define(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh + 0.5 * h * k2[0, 0], Ih + 0.5 * h * k2[1, 0], Rh + 0.5 * h * k2[2, 0], Sv + 0.5 * h * k2[3, 0], Iv + 0.5 * h * k2[4, 0])
    k4 = model_define(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh + h * k3[0, 0], Ih + h * k3[1, 0], Rh + h * k3[2, 0], Sv + h * k3[3, 0], Iv +h * k3[4, 0])

    # Update nilai baru untuk Sh, Ih, Rh, Sv, Iv
    Sh_new = Sh + (h / 6) * (k1[0, 0] + 2 * k2[0, 0] + 2 * k3[0, 0] + k4[0, 0])
    Ih_new = Ih + (h / 6) * (k1[1, 0] + 2 * k2[1, 0] + 2 * k3[1, 0] + k4[1, 0])
    Rh_new = Rh + (h / 6) * (k1[2, 0] + 2 * k2[2, 0] + 2 * k3[2, 0] + k4[2, 0])
    Sv_new = Sv + (h / 6) * (k1[3, 0] + 2 * k2[3, 0] + 2 * k3[3, 0] + k4[3, 0])
    Iv_new = Iv + (h / 6) * (k1[4, 0] + 2 * k2[4, 0] + 2 * k3[4, 0] + k4[4, 0])

    # Matriks J dan F baru
    J, F = matrix_define(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh_new, Ih_new, Rh_new, Sv_new, Iv_new)

    # Runge-Kutta untuk J * S + F
    k1_final = dS_dt(J, S, F)
    k2_final = dS_dt(J, S + 0.5 * h * k1_final, F)
    k3_final = dS_dt(J, S + 0.5 * h * k2_final, F)
    k4_final = dS_dt(J, S + h * k3_final, F)

    S_new = S + (h / 6) * (k1_final + 2 * k2_final + 2 * k3_final + k4_final)
    return Sh_new, Ih_new, Rh_new, Sv_new, Iv_new, J, F, S_new

# Streamlit App Title
st.title("Dynamic Sensitivity Analysis with Custom Parameters")

# Parameter Awal
Sh = st.sidebar.number_input("Sh", value=200.0, step=1.0)
Ih = st.sidebar.number_input("Ih", value=50.0, step=1.0)
Rh = st.sidebar.number_input("Rh", value=0.0, step=1.0)
Sv = st.sidebar.number_input("Sv", value=50.0, step=1.0)
Iv = st.sidebar.number_input("Iv", value=10.0, step=1.0)
A = st.sidebar.number_input("A", value=1.0, step=0.1)
Bh = st.sidebar.number_input("Bh", value=0.02, step=0.01)
Mh = st.sidebar.number_input("Mh", value=0.01, step=0.01)
u1 = st.sidebar.number_input("u1", value=0.1, step=0.01)
a = st.sidebar.number_input("a", value=0.1, step=0.01)
II = st.sidebar.number_input("II", value=50.0, step=1.0)
Bv = st.sidebar.number_input("Bv", value=0.02, step=0.01)
Mv = st.sidebar.number_input("Mv", value=0.05, step=0.01)
u2min = st.sidebar.number_input("u2min", value=0.3, step=0.01)
Ohm21 = st.sidebar.number_input("Ohm21", value=17.0, step=1.0)
Ohm22 = st.sidebar.number_input("Ohm22", value=31.0, step=1.0)
Ohm23 = st.sidebar.number_input("Ohm23", value=73.0, step=1.0)
Ohm24 = st.sidebar.number_input("Ohm24", value=94.0, step=1.0)
Ohm2 = st.sidebar.number_input("Ohm2", value=7.0, step=1.0)

# Parameter waktu
st.sidebar.header("Time Parameters")
t_awal = st.sidebar.number_input("t_awal", value=0.0, step=0.1)
t_akhir = st.sidebar.number_input("t_akhir", value=500.0, step=1.0)
h = st.sidebar.number_input("h (Step Size)", value=0.1, step=0.01)
num_steps = int((t_akhir - t_awal) / h) #jumlah langkah (num_steps)

# Matriks untuk menyimpan hasil
results = np.zeros((num_steps, 5, 14))

# Inisialisasi vector S awal
S = np.array([
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ])
results[0] = S

J, F = matrix_define(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv)

#Hitung u2max dan u2
u2max = II * Bv * (1 - Mv) + u2min
u2 = nilai_u2(Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, II, Bv, u2min, Mv)

print(f"u2max = {u2max}, u2 = {u2}")

# Iterasi
for i in range(0, num_steps):
    if i == 0:  # Pada iterasi pertama, S tetap 0
        results[i] = S
    else:
        Sh, Ih, Rh, Sv, Iv, J, F, S = runge_kutta_4(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv, h, S)
        results[i] = S

    # Output tiap iterasi
    # print(f"Iterasi {i}:")
    # print(f"Sh = {Sh}, Ih = {Ih}, Rh = {Rh}, Sv = {Sv}, Iv = {Iv}")
    # print("Jacobian J =\n", J)
    # print("Matrix F =\n", F)
    # print("Matrix S =\n", results[i])
    # print("-" * 50)

# Define the parameter names
parameter_names = [
    'A', 'Bh', 'Mh', 'u1', 'a', 'II', 'Bv', 'u2min', 'Ohm2', 'Ohm21', 'Ohm22', 'Ohm23', 'Ohm24', 'Mv']

# Define the variable names
variable_names = ['Sh','Ih','Rh','Sv','Iv']

# Define custom groupings for each variable
groupings = {
    'Sh': {
        'group1': ['Ohm21', 'Ohm22', 'Ohm24', 'A', 'Ohm23', 'Ohm2', 'II'],
        'group2': ['Bv', 'Bh', 'Mv'],
        'group3': ['u2min', 'u1', 'a', 'Mh']
    },
    'Ih': {
        'group1': ['Ohm21', 'Ohm22','Ohm24', 'A', 'Ohm23', 'Ohm2', 'II'],
        'group2': ['u2min', 'u1', 'a', 'Mh'],
        'group3': ['Bh', 'Bv', 'Mv']
    },
    'Rh': {
        'group1': ['Ohm21', 'Ohm22','Ohm24', 'Ohm2', 'Ohm23', 'A', 'II'],
        'group2': ['u2min', 'u1'],
        'group3': ['Bh', 'Bv', 'Mv', 'a', 'Mh']
    },
    'Sv': {
        'group1': ['Ohm2', 'Ohm24', 'Ohm21', 'II', 'Ohm22', 'Ohm23', 'A'],
        'group2': ['Bv', 'Bh', 'Mv'],
        'group3': ['u2min', 'u1', 'a', 'Mh']
    },
    'Iv': {
        'group1': ['Ohm2', 'Ohm24', 'Ohm21', 'Ohm22', 'Ohm23', 'II', 'A'],
        'group2': ['Mv', 'Mh', 'u1', 'a', 'u2min'],
        'group3': ['Bv', 'Bh']
    }
}

# Define custom for each variable's group
plot_settings = {
    'Sh': {
        'group1': {'xlim': (0, 100), 'ylim': (-1, 1), 'x_interval': 20, 'y_interval':0.5},
        'group2': {'xlim': (0, 100), 'ylim': (-5000, 1000), 'x_interval': 20, 'y_interval': 1000},
        'group3': {'xlim': (0, 100), 'ylim': (-100, 60), 'x_interval': 20, 'y_interval':20}
    },
    'Ih': {
        'group1': {'xlim': (0, 100), 'ylim': (-5, 3), 'x_interval': 20, 'y_interval': 1},
        'group2': {'xlim': (0, 200), 'ylim': (-500, 0), 'x_interval': 50, 'y_interval': 100},
        'group3': {'xlim': (0, 200), 'ylim': (-3000, 18000), 'x_interval': 50, 'y_interval': 3000}
    },
    'Rh': {
        'group1': {'xlim': (0, 200), 'ylim': (-8, 2), 'x_interval': 50, 'y_interval': 2},
        'group2': {'xlim': (0, 200), 'ylim': (-600, 0), 'x_interval': 50, 'y_interval': 100},
        'group3': {'xlim': (0, 200), 'ylim': (-2000, 12000), 'x_interval': 50, 'y_interval': 2000}
    },
    'Sv': {
        'group1': {'xlim': (0, 30), 'ylim': (-0.1, 0.4), 'x_interval': 5, 'y_interval':0.1},
        'group2': {'xlim': (0, 30), 'ylim': (-1600, 200), 'x_interval': 5, 'y_interval': 200},
        'group3': {'xlim': (0, 20), 'ylim': (-15, 20), 'x_interval': 5, 'y_interval':5}
    },
    'Iv': {
        'group1': {'xlim': (0, 100), 'ylim': (-3, 3), 'x_interval': 20, 'y_interval': 1},
        'group2': {'xlim': (0, 200), 'ylim': (-500, 0), 'x_interval': 50, 'y_interval': 100},
        'group3': {'xlim': (0, 50), 'ylim': (0, 2000), 'x_interval': 10, 'y_interval': 400}
    }
}

# Define colors for the plots
colors = ['#1E90FF', '#FFD700', '#228B22', '#FF4500', '#8A2BE2','#D2691E',
          '#FF1493', '#00BFFF', '#B22222', '#C71585', '#FF8C00', '#32CD32']

# Define line styles
line_styles = ['-', ':', (0, (3, 1, 1, 1))]


# Helper function to get indices of parameters
def get_indices(params):
    return [parameter_names.index(param) for param in params]

# Function to plot each group with thicker lines and vibrant colors
def plot_group(variable_index, variable_name, variable_key, group1_params, group2_params, group3_params):
    fig, axes = plt.subplots(3, 1, figsize=(10, 15))  # Create the figure and axes
    
    groups = [group1_params, group2_params, group3_params]
    settings = [plot_settings[variable_key]['group1'], plot_settings[variable_key]['group2'], plot_settings[variable_key]['group3']]
    
    for i, (group_params, ax, setting) in enumerate(zip(groups, axes, settings)):
        indices = get_indices(group_params)
        for j, index in enumerate(indices):
            ax.plot(
                results[:, variable_index, index],
                label=f'{parameter_names[index]}',
                linestyle=line_styles[j % len(line_styles)],
                color=colors[j],
                linewidth=2
            )
        ax.set_title(f'{variable_name}', fontsize=10)
        ax.set_xlabel('Time')
        ax.set_ylabel('Sensitivity')
        ax.set_xlim(setting['xlim'])
        ax.set_ylim(setting['ylim'])
        ax.set_xticks(np.arange(setting['xlim'][0], setting['xlim'][1] + setting['x_interval'], setting['x_interval']))
        ax.set_yticks(np.arange(setting['ylim'][0], setting['ylim'][1] + setting['y_interval'], setting['y_interval']))
        ax.grid(color='lightgrey', linestyle='-', linewidth=0.5)
        ax.legend()
    
    plt.tight_layout()
    return fig  # Return the figure object

# Streamlit interactive plots
for i, variable_name in enumerate(variable_names):
    variable_key = list(groupings.keys())[i]
    group1_params = groupings[variable_key]['group1']
    group2_params = groupings[variable_key]['group2']
    group3_params = groupings[variable_key]['group3']
    fig = plot_group(i, variable_name, variable_key, group1_params, group2_params, group3_params)
    st.pyplot(fig)  # Pass the `fig` explicitly to st.pyplot
    