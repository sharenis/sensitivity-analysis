# -*- coding: utf-8 -*-
"""Code Model_domain 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ghcM3LJYrqZM6zL1od0uUG9uV4VBPmu3
"""

#library
import numpy as np
import pandas as pd
import random
import matplotlib.pyplot as plt

from sympy import symbols, Eq
import streamlit as st
import warnings
warnings.filterwarnings("ignore")

"""Function Piecewise by Sharen Ivana"""

#nilai piecewise function jacobian
def J44(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        domain_1 = u2min
        return (-Bv * Ih) - (domain_1 + Mv)

    elif Ohm21 <= Ohm2 <= Ohm22:
        domain_2 = u2min + ((Ohm2 - Ohm21) / (Ohm22 - Ohm21) * II * Bv * (1 - Mv))
        return (-Bv * Ih) - (domain_2 + Mv)

    elif Ohm22 < Ohm2 <= Ohm23:
        domain_3 = II * Bv * (1 - Mv) + u2min
        return (-Bv * Ih) - (domain_3 + Mv)

    elif Ohm23 < Ohm2 <= Ohm24:
        domain_4 = II * Bv * (1 - Mv) + u2min + ((Ohm2 - Ohm23) / (Ohm23 - Ohm24) * II * Bv * (1 - Mv))
        return (-Bv * Ih) - (domain_4 + Mv)

def J55(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        domain_1 = u2min
        return -(domain_1 + Mv)

    elif Ohm21 <= Ohm2 <= Ohm22:
        domain_2 = u2min + ((Ohm2 - Ohm21) / (Ohm22 - Ohm21) * II * Bv * (1 - Mv))
        return -(domain_2 + Mv)

    elif Ohm22 < Ohm2 <= Ohm23:
        domain_3 = II * Bv * (1 - Mv) + u2min
        return -(domain_3 + Mv)


    elif Ohm23 < Ohm2 <= Ohm24:
        domain_4 = II * Bv * (1 - Mv) + u2min + ((Ohm2 - Ohm23) / (Ohm23 - Ohm24) * II * Bv * (1 - Mv))
        return -(domain_4 + Mv)


#nilai piecewise function ∂F/∂P
def F46(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return 1

    elif Ohm21 <= Ohm2 <= Ohm22:
        return 1 - Sv * (Ohm2 - Ohm21)/(Ohm22 - Ohm21) * Bv * (1 - Mv)

    elif Ohm22 < Ohm2 <= Ohm23:
        return 1 - Sv * Bv * (1 - Mv)

    elif Ohm23 < Ohm2 <= Ohm24:
        return 1 - Sv * Bv * (1 - Mv) - Sv * (Ohm2 - Ohm23)/(Ohm23 - Ohm24) * Bv * (1 - Mv)

def F47(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return -Sv * Ih

    elif Ohm21 <= Ohm2 <= Ohm22:
        return (-Sv * Ih) - Sv * (Ohm2 - Ohm21)/(Ohm22 - Ohm21) * II * (1 - Mv)

    elif Ohm22 < Ohm2 <= Ohm23:
        return (-Sv * Ih) - Sv * II * (1 - Mv)

    elif Ohm23 < Ohm2 <= Ohm24:
        return (-Sv * Ih) - Sv * II * (1 - Mv) - Sv * (Ohm2 - Ohm23)/(Ohm23 - Ohm24) * II * (1 - Mv)

def F48(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return -Sv

    elif Ohm21 <= Ohm2 <= Ohm22:
        return -Sv

    elif Ohm22 < Ohm2 <= Ohm23:
        return -Sv

    elif Ohm23 < Ohm2 <= Ohm24:
        return -Sv

def F49(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return 0

    elif Ohm21 <= Ohm2 <= Ohm22:
        return -Sv * II * Bv * (1 - Mv) / (Ohm22 - Ohm21)

    elif Ohm22 < Ohm2 <= Ohm23:
        return 0

    elif Ohm23 < Ohm2 <= Ohm24:
        return -Sv * II * Bv * (1 - Mv) / (Ohm23 - Ohm24)

def F410(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return 0

    elif Ohm21 <= Ohm2 <= Ohm22:
        return -Sv * ((Ohm2 - Ohm22)/(Ohm22 - Ohm21)*(Ohm22 - Ohm21)) * II * Bv * (1 - Mv)

    elif Ohm22 < Ohm2 <= Ohm23:
        return 0

    elif Ohm23 < Ohm2 <= Ohm24:
        return 0

def F411(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return 0

    elif Ohm21 <= Ohm2 <= Ohm22:
        return -Sv * ((Ohm21 - Ohm2)/(Ohm22 - Ohm21)*(Ohm22 - Ohm21)) * II * Bv * (1 - Mv)

    elif Ohm22 < Ohm2 <= Ohm23:
        return 0

    elif Ohm23 < Ohm2 <= Ohm24:
        return 0

def F412(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return 0

    elif Ohm21 <= Ohm2 <= Ohm22:
        return 0

    elif Ohm22 < Ohm2 <= Ohm23:
        return 0

    elif Ohm23 < Ohm2 <= Ohm24:
        return -Sv * ((Ohm24 - Ohm2)/(Ohm23 - Ohm24)*(Ohm23 - Ohm24)) * II * Bv * (1 - Mv)

def F413(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return 0

    elif Ohm21 <= Ohm2 <= Ohm22:
        return 0

    elif Ohm22 < Ohm2 <= Ohm23:
        return 0

    elif Ohm23 < Ohm2 <= Ohm24:
        return -Sv * ((Ohm2 - Ohm24)/(Ohm23 - Ohm24)*(Ohm23 - Ohm24)) * II * Bv * (1 - Mv)

def F414(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return -Sv

    elif Ohm21 <= Ohm2 <= Ohm22:
        return Sv * (Ohm2 - Ohm21)/(Ohm22 - Ohm21) * II * Bv - Sv

    elif Ohm22 < Ohm2 <= Ohm23:
        return (Sv * II * Bv) - Sv

    elif Ohm23 < Ohm2 <= Ohm24:
        return (Sv * II * Bv) + Sv * (Ohm2 - Ohm23)/(Ohm23 - Ohm24) * II * Bv - Sv


def F56(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return 0

    elif Ohm21 <= Ohm2 <= Ohm22:
        return -Iv * (Ohm2 - Ohm21)/(Ohm22 - Ohm21) * Bv * (1 - Mv)

    elif Ohm22 < Ohm2 <= Ohm23:
        return -Iv * Bv * (1 - Mv)

    elif Ohm23 < Ohm2 <= Ohm24:
        return (-Iv * Bv * (1 - Mv)) - Iv * (Ohm2 - Ohm23)/(Ohm23 - Ohm24) * Bv * (1 - Mv)

def F57(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return Sv * Ih

    elif Ohm21 <= Ohm2 <= Ohm22:
        return (Sv * Ih) - Iv * (Ohm2 - Ohm21)/(Ohm22 - Ohm21) * II * (1 - Mv)

    elif Ohm22 < Ohm2 <= Ohm23:
        return (Sv * Ih) - Iv * II * (1 - Mv)

    elif Ohm23 < Ohm2 <= Ohm24:
        return (Sv * Ih) - Iv * II * (1 - Mv) - Iv * (Ohm2 - Ohm23)/(Ohm23 - Ohm24) * II * (1 - Mv)

def F58(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return -Iv

    elif Ohm21 <= Ohm2 <= Ohm22:
        return -Iv

    elif Ohm22 < Ohm2 <= Ohm23:
        return -Iv

    elif Ohm23 < Ohm2 <= Ohm24:
        return -Iv

def F59(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return 0

    elif Ohm21 <= Ohm2 <= Ohm22:
        return -Iv * II * Bv * (1 - Mv) / (Ohm22 - Ohm21)

    elif Ohm22 < Ohm2 <= Ohm23:
        return 0

    elif Ohm23 < Ohm2 <= Ohm24:
        return -Iv * II * Bv * (1 - Mv) / (Ohm23 - Ohm24)

def F510(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return 0

    elif Ohm21 <= Ohm2 <= Ohm22:
        return -Iv * ((Ohm2 - Ohm22)/(Ohm22 - Ohm21)*(Ohm22 - Ohm21)) * II * Bv * (1 - Mv)

    elif Ohm22 < Ohm2 <= Ohm23:
        return 0

    elif Ohm23 < Ohm2 <= Ohm24:
        return 0

def F511(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return 0

    elif Ohm21 <= Ohm2 <= Ohm22:
        return -Iv * ((Ohm21 - Ohm2)/(Ohm22 - Ohm21)*(Ohm22 - Ohm21)) * II * Bv * (1 - Mv)

    elif Ohm22 < Ohm2 <= Ohm23:
        return 0

    elif Ohm23 < Ohm2 <= Ohm24:
        return 0

def F512(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return 0

    elif Ohm21 <= Ohm2 <= Ohm22:
        return 0

    elif Ohm22 < Ohm2 <= Ohm23:
        return 0

    elif Ohm23 < Ohm2 <= Ohm24:
        return -Iv * ((Ohm24 - Ohm2)/(Ohm23 - Ohm24)*(Ohm23 - Ohm24)) * II * Bv * (1 - Mv)

def F513(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return 0

    elif Ohm21 <= Ohm2 <= Ohm22:
        return 0

    elif Ohm22 < Ohm2 <= Ohm23:
        return 0

    elif Ohm23 < Ohm2 <= Ohm24:
        return -Iv * ((Ohm2 - Ohm23)/(Ohm23 - Ohm24)*(Ohm23 - Ohm24)) * II * Bv * (1 - Mv)

def F514(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return -Iv

    elif Ohm21 <= Ohm2 <= Ohm22:
        return Iv * (Ohm2 - Ohm21)/(Ohm22 - Ohm21) * II * Bv * - Iv

    elif Ohm22 < Ohm2 <= Ohm23:
        return Iv * II * Bv - Iv

    elif Ohm23 < Ohm2 <= Ohm24:
        return Iv * II * Bv + Iv * (Ohm2 - Ohm23)/(Ohm23 - Ohm24) * II * Bv * - Iv

#nilai u2(ohm2)
def nilai_u2(Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, II, Bv, u2min, Mv):
    if Ohm2 <= Ohm21 or Ohm2 >= Ohm24:
        return u2min

    elif Ohm21 <= Ohm2 <= Ohm22:
        return u2min + (Ohm2 - Ohm21) / (Ohm22 - Ohm21) * II * Bv * (1 - Mv)

    elif Ohm22 < Ohm2 <= Ohm23:
        return II * Bv * (1 - Mv) #u2max

    elif Ohm23 < Ohm2 <= Ohm24:
        return II * Bv * (1 - Mv) + (Ohm2 - Ohm23) / (Ohm24 - Ohm23) * (u2min - II * Bv * (1 - Mv))

import numpy as np
import streamlit as st
import matplotlib.pyplot as plt

# Fungsi u2_max
def nilai_u2(Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, II, Bv, u2min, Mv):
    return II * Bv * (1 - Mv) + u2min

# Model turunan sistem
def model_define(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv):
    model = np.array([
        [A - (Bh * Sh * Iv) - (Mh * Sh)],  # dSh/dt
        [(Bh * Sh * Iv) - (u1 + a + Mh) * Ih],  # dIh/dt
        [(a * Ih) - (Mh * Rh)],  # dRh/dt
        [II - (Bv * Sv * Ih) - (nilai_u2(Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, II, Bv, u2min, Mv) + Mv) * Sv],  # dSv/dt
        [(Bv * Sv * Ih) - (nilai_u2(Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, II, Bv, u2min, Mv) + Mv) * Iv]   # dIv/dt
    ])
    return model

# Fungsi Runge-Kutta 4
def runge_kutta_4(params, Sh, Ih, Rh, Sv, Iv, h, n_steps):
    A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv = params
    
    results = {"t": [], "Sh": [], "Ih": [], "Rh": [], "Sv": [], "Iv": []}
    t = 0
    
    for _ in range(n_steps):
        # Simpan nilai sekarang
        results["t"].append(t)
        results["Sh"].append(Sh)
        results["Ih"].append(Ih)
        results["Rh"].append(Rh)
        results["Sv"].append(Sv)
        results["Iv"].append(Iv)
        
        # Hitung nilai k1, k2, k3, k4
        k1 = model_define(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, Sh, Ih, Rh, Sv, Iv)
        k2 = model_define(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, 
                          Sh + 0.5 * h * k1[0, 0], Ih + 0.5 * h * k1[1, 0], Rh + 0.5 * h * k1[2, 0],
                          Sv + 0.5 * h * k1[3, 0], Iv + 0.5 * h * k1[4, 0])
        k3 = model_define(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, 
                          Sh + 0.5 * h * k2[0, 0], Ih + 0.5 * h * k2[1, 0], Rh + 0.5 * h * k2[2, 0],
                          Sv + 0.5 * h * k2[3, 0], Iv + 0.5 * h * k2[4, 0])
        k4 = model_define(A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv, 
                          Sh + h * k3[0, 0], Ih + h * k3[1, 0], Rh + h * k3[2, 0],
                          Sv + h * k3[3, 0], Iv + h * k3[4, 0])
        
        # Update nilai
        Sh += (h / 6) * (k1[0, 0] + 2 * k2[0, 0] + 2 * k3[0, 0] + k4[0, 0])
        Ih += (h / 6) * (k1[1, 0] + 2 * k2[1, 0] + 2 * k3[1, 0] + k4[1, 0])
        Rh += (h / 6) * (k1[2, 0] + 2 * k2[2, 0] + 2 * k3[2, 0] + k4[2, 0])
        Sv += (h / 6) * (k1[3, 0] + 2 * k2[3, 0] + 2 * k3[3, 0] + k4[3, 0])
        Iv += (h / 6) * (k1[4, 0] + 2 * k2[4, 0] + 2 * k3[4, 0] + k4[4, 0])
        
        t += h

    return results

# Streamlit App
st.title("Simulasi Penyebaran Virus Tungro pada Padi")

# Input parameter
st.sidebar.header("Parameter Input")
A = st.sidebar.number_input("A", value=10.0)
Bh = st.sidebar.number_input("Bh", value=0.1)
Mh = st.sidebar.number_input("Mh", value=0.05)
u1 = st.sidebar.number_input("u1", value=0.02)
a = st.sidebar.number_input("a", value=0.1)
II = st.sidebar.number_input("II", value=15.0)
Bv = st.sidebar.number_input("Bv", value=0.2)
u2min = st.sidebar.number_input("u2min", value=0.01)
Ohm2 = st.sidebar.number_input("Ohm2", value=0.5)
Ohm21 = st.sidebar.number_input("Ohm21", value=0.5)
Ohm22 = st.sidebar.number_input("Ohm22", value=0.5)
Ohm23 = st.sidebar.number_input("Ohm23", value=0.5)
Ohm24 = st.sidebar.number_input("Ohm24", value=0.5)
Mv = st.sidebar.number_input("Mv", value=0.05)

h = st.sidebar.number_input("Step size (h)", value=0.1)
n_steps = st.sidebar.number_input("Jumlah Langkah", value=200, step=10)

# Nilai awal
Sh, Ih, Rh, Sv, Iv = 100, 10, 5, 50, 20
params = (A, Bh, Mh, u1, a, II, Bv, u2min, Ohm2, Ohm21, Ohm22, Ohm23, Ohm24, Mv)

# Run Simulation
results = runge_kutta_4(params, Sh, Ih, Rh, Sv, Iv, h, n_steps)

# Plot
fig, ax = plt.subplots()
ax.plot(results["t"], results["Sh"], label="Sh")
ax.plot(results["t"], results["Ih"], label="Ih")
ax.plot(results["t"], results["Rh"], label="Rh")
ax.plot(results["t"], results["Sv"], label="Sv")
ax.plot(results["t"], results["Iv"], label="Iv")

ax.set_xlabel("Waktu")
ax.set_ylabel("Populasi")
ax.legend()
st.pyplot(fig)
